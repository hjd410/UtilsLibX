//>>built
define("com/huayun/gl/shaders/fillExtrusion",["exports","../../webgis/data/uniform"],function(d,a){d.fillExtrusionVS="#ifdef GL_ES\nprecision mediump float;\n#else\n\n#if !defined(lowp)\n#define lowp\n#endif\n\n#if !defined(mediump)\n#define mediump\n#endif\n\n#if !defined(highp)\n#define highp\n#endif\n\n#endif\n\nuniform mat4 u_matrix;\nuniform vec3 u_lightcolor;\nuniform lowp vec3 u_lightpos;\nuniform lowp float u_lightintensity;\nuniform float u_vertical_gradient;\nuniform lowp float u_opacity;\n\nattribute vec2 a_pos;\nattribute vec4 a_normal_ed;\n\nvarying vec4 v_color;\n\n// \u6761\u4ef6\u7f16\u8bd1\n// \u989c\u8272\n#ifndef HAS_UNIFORM_u_color\nuniform lowp float u_color_t;\nattribute highp vec4 a_color;\n#else\nuniform highp vec4 u_color;\n#endif\n\n// \u9ad8\u5ea6\n#ifndef HAS_UNIFORM_u_height\nuniform lowp float u_height_t;\nattribute highp vec2 a_height;\n#else\nuniform highp float u_height;\n#endif\n\n// \u5730\u5f62\n#ifdef HAS_TERRAIN\nuniform sampler2D u_height_image;\nuniform highp float u_min_height;\nuniform highp float u_delta_height;\n#else\n// \u5e95\u90e8\u9ad8\u5ea6\n#ifndef HAS_UNIFORM_u_base\nuniform lowp float u_base_t;\nattribute highp vec2 a_base;\n#else\nuniform highp float u_base;\n#endif\n#endif\n\n// \u5904\u7406\u51fd\u6570\nvec2 unpack_float(const float packedValue) {\n    int packedIntValue \x3d int(packedValue);\n    int v0 \x3d packedIntValue/256;\n    return vec2(v0, packedIntValue - v0 * 256);\n}\n\nfloat unpack_mix_vec2(const vec2 packedValue, const float t) {\n    return mix(packedValue[0], packedValue[1], t);\n}\n\nvec4 decode_color(const vec2 encodedColor) {\n    return vec4(\n    unpack_float(encodedColor[0]) / 255.0,\n    unpack_float(encodedColor[1]) / 255.0\n    );\n}\n\nvec4 unpack_mix_color(const vec4 packedColors, const float t) {\n    vec4 minColor \x3d decode_color(vec2(packedColors[0], packedColors[1]));\n    vec4 maxColor \x3d decode_color(vec2(packedColors[2], packedColors[3]));\n    return mix(minColor, maxColor, t);\n}\n\nvoid main() {\n\n    #ifndef HAS_UNIFORM_u_height\n    highp float height \x3d unpack_mix_vec2(a_height, u_height_t);\n    #else\n    highp float height \x3d u_height;\n    #endif\n\n    #ifndef HAS_UNIFORM_u_color\n    highp vec4 color \x3d unpack_mix_color(a_color, u_color_t);\n    #else\n    highp vec4 color \x3d u_color;\n    #endif\n\n    #ifdef HAS_TERRAIN\n    vec3 rgb \x3d texture2D(u_height_image, a_pos/8192.0).rgb;\n    highp float base \x3d rgb.r * u_delta_height + u_min_height;\n    #else\n    #ifndef HAS_UNIFORM_u_base\n    highp float base \x3d unpack_mix_vec2(a_base, u_base_t);\n    #else\n    highp float base \x3d u_base;\n    #endif\n    #endif\n\n    vec3 normal \x3d a_normal_ed.xyz;\n    float t \x3d mod(normal.x, 2.0);\n    gl_Position \x3d u_matrix * vec4(a_pos, t \x3e 0.0 ? height + base : base, 1);\n    float colorvalue \x3d color.r * 0.2126 + color.g * 0.7152 + color.b * 0.0722;\n    v_color \x3d vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 ambientlight \x3d vec4(0.03, 0.03, 0.03, 1.0);\n    color +\x3d ambientlight;\n    float directional \x3d clamp(dot(normal / 16384.0, u_lightpos), 0.0, 1.0);\n    directional \x3d mix((1.0 - u_lightintensity), max((1.0 - colorvalue + u_lightintensity), 1.0), directional);\n    if (normal.y !\x3d 0.0) {\n        directional *\x3d (\n        (1.0 - u_vertical_gradient) +\n        (u_vertical_gradient * clamp((t + base) * pow(height / 150.0, 0.5), mix(0.7, 0.98, 1.0 - u_lightintensity), 1.0)));\n    }\n    v_color.r +\x3d clamp(color.r * directional * u_lightcolor.r, mix(0.0, 0.3, 1.0 - u_lightcolor.r), 1.0);\n    v_color.g +\x3d clamp(color.g * directional * u_lightcolor.g, mix(0.0, 0.3, 1.0 - u_lightcolor.g), 1.0);\n    v_color.b +\x3d clamp(color.b * directional * u_lightcolor.b, mix(0.0, 0.3, 1.0 - u_lightcolor.b), 1.0);\n    v_color *\x3d u_opacity;\n}\n";
d.fillExtrusionFS="precision mediump float;\nvarying vec4 v_color;\n\nvoid main() {\n    gl_FragColor \x3d v_color;\n}\n";d.fillExtrusionUniforms=function(b,c){return{u_matrix:new a.UniformMatrix4f(b,c.u_matrix),u_lightpos:new a.Uniform3f(b,c.u_lightpos),u_lightintensity:new a.Uniform1f(b,c.u_lightintensity),u_lightcolor:new a.Uniform3f(b,c.u_lightcolor),u_vertical_gradient:new a.Uniform1f(b,c.u_vertical_gradient),u_opacity:new a.Uniform1f(b,c.u_opacity),u_height_image:new a.Uniform1i(b,c.u_height_image),
u_min_height:new a.Uniform1f(b,c.u_min_height),u_delta_height:new a.Uniform1f(b,c.u_delta_height)}}});